from typing import Any, List

any_var: Any
int_var: int
ellipsis_var: ...
list_var: List[int]

ellipsis_assign = ...
int_assign = 34
str_assign = "Foo"
list_alias = List[int]

def no_return_type(): ...
def return_none() -> None: ...
def return_any() -> Any: ...
def return_int() -> int: ...

def no_arg_type(foo) -> None: ...
def arg_type_none(foo: None) -> None: ...
def arg_type_any(foo: Any) -> None: ...
def arg_type_int(foo: int) -> None: ...
def no_kwonly_arg_type(*, abc) -> None: ...
def no_varargs_type(*args, **kwargs) -> None: ...

if True:
    def sole_if_path(): ...

if True:
    def if_path(): ...
elif False:
    def elif1_path(): ...
elif False:
    def elif2_path(): ...
else:
    def else_path(): ...

class Foo: ...
class Bar: pass

class TestClass:
    no_arg_type = ""
    arg_type_ellipsis: ...
    arg_type: int
    arg_type_and_default: str = ""

    def no_return_type(self): ...
    def return_none(self) -> None: ...
    def return_any(self) -> Any: ...
    def return_int(self) -> int: ...

    def missing_self() -> None: ...

    @staticmethod
    def first_unannotated(foo) -> None: ...
    @classmethod
    def cls_method(cls) -> None: ...

    if True:
        def sole_if_path(self): ...

    if True:
        def if_path(self): ...
    elif False:
        def elif1_path(self): ...
    elif False:
        def elif2_path(self): ...
    else:
        def else_path(self): ...

